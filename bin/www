#!/usr/bin/env node

var app = require("../app");
var debug = require("debug")("myapp:server");
var http = require("node:http");
var https = require("node:https");
var fs = require("node:fs");
const process = require("node:process");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "8383");
app.set("port", port);

var server = createServer(app);
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) return val;
	if (port >= 0) return port;
	return false;
}

// handle specific listen errors with friendly messages
function onError(error) {
	if (error.syscall !== "listen") throw error;
	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
	var process = require("node:process");
    switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
	debug("Listening on " + bind);
}

function createServer(app) {
	var server;
	if (process.env.NODE_ENV === "production") {
		server = https.createServer(
			{
				key: fs.readFileSync('/etc/letsencrypt/live/yourdomain.com/privkey.pem'),
                cert: fs.readFileSync('/etc/letsencrypt/live/yourdomain.com/fullchain.pem'),
                ca: fs.readFileSync('/etc/letsencrypt/live/yourdomain.com/chain.pem')
			},
			app,
		);
	} else {
		server = http.createServer(app);
	}
	return server;
}
